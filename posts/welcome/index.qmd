---
title: "Essential SQL Skills for Data Professionals"
author: "Anna Nandar"
date: "2025-01-14"
categories: [news]
---

During my time as a Data Analyst at a startup company, SQL was an essential tool to extract the  data to measure key metrics such as product growth, customer churn over time, revenue trends, and deal success rates. For over three years, not a single day passed without writing SQL queries. In the data science field, I noticed that SQL is one of the requirements in the job description. Here, I’ll share some essential SQL techniques that a data professional should master.

![](thumbnail.jpg)

#### Mastering Joins
Joins are the fundatamental topic to combine multiple tables. It's important to understand clearly to apply different types of joins based on the stakeholders' request or requirements. Among different joins, LEFT JOIN and INNER JOIN were the ones I used most frequently.
When to use each type of join:
INNER JOIN: Use when we want to extract the matching data in both tables. 
LEFT JOIN: Use when we want all of the records from the first table based on the matched records from the second table
Here's a quick example for those two joins. 

```sql
SELECT c.customer_id, c.customer_name, o.order_id, o.order_date, o.order_amount
FROM customers as c
LEFT JOIN orders as o 
ON c.customer_id = o.customer_id;
```

This query will retrieve all the customers from the customers table, including the customers without any orders. 

``` sql
SELECT c.customer_id, c.customer_name, o.order_id, o.order_date, o.order_amount	
FROM customers as c
INNER JOIN orders as o 
ON c.customer_id = o.customer_id;
This query will retrieve only the customers who had orders. 
```

#### Using CASE WHEN for Conditional Logic
The CASE WHEN statement is used to segment or categorize the data. Before we use this, there are a few conditions to consider to make sure that the logic is aligned with stakeholders because this categorization will lead to wrong directions.   
Let's say we want to segment companies based on the number of employees they had: 

``` sql
SELECT company_name,
       CASE
           WHEN employees >= 500 THEN 'Large'
           WHEN employees BETWEEN 100 AND 499 THEN 'Medium'
           ELSE 'Small'
       END AS company_size
FROM companies;
```

This query will segment the companies' size which will help us to do further analysis. 

Leveraging Aggregate Functions
Aggregate functions are essential for summarizing data - for example we want to extract the customer's usage data over time, whether weekly, monthly, or annually.
Let's suppose our stakeholders request a dashboard showing product usage hours over different time frames. 

``` sql
SELECT customer_id,
       DATE_TRUNC('month', usage_timestamp) AS month,
       SUM(usage_hours) AS total_usage
FROM product_usage
GROUP BY customer_id, month;
```

Before we extract the data over time, we need to convert the timestamp first to the time that we want to apply in the dashboard. All the data that is related with time in our product_usage table is stored as a timestamp. Therefore, we need to master the data type conversion as well. 

#### Data Type Conversion
Converting data types is often necessary for analysis. Before we convert the data, we should understand well about the input format of our data and what we want as the output. Data type conversion is common when we extract the data from our database. 
Here is the same concept as the previous example. We want the product usage date to do analysis. 

``` sql
SELECT customer_id, CAST(usage_timestamp AS DATE) AS usage_date
FROM product_usage;
```

#### Common Table Expressions (CTEs)
When we deal with complex queries, CTEs will allow us to make our SQL queries more readable and easy to manage. In my opinion, the reasons behind using CTEs are to break down the complex queries into simple queries and to use the results within the same queries. 
Let's say we need to join two tables first, then combine the result with another dataset. Here’s an example:

``` sql
WITH customer_orders AS (
    SELECT customer_id, COUNT(order_id) AS total_orders, SUM(amount) as total_amount
    FROM orders
    GROUP BY customer_id
),
customer_details AS ( 
SELECT ci.customer_id, ci.tier_level, s.segment_level 
FROM customer_info as ci
LEFT JOIN customer_segments s 
ON ci.customer_id = s.customer_id )


SELECT a.customer_id, a.total_orders, total_amount, tier_level, segment_level
FROM customer_orders a
JOIN customer_details b ON a.customer_id = b.customer_id;

```

We can use multiple joins in the first transactions in customer_orders. But it'll mix with customer_orders data and customer_details info. If the query is too complex, it's not easy to trace what's wrong. Therefore, we split two steps - customer_orders and customer_details.

#### Applying Window Functions
Window functions are powerful to do the complex computations such as comparing monthly profits or ranking customers. As an example, we want to get the moving averages or the comparisons within the tier level or we need to set the ranks across the countries. 
Let's write the query to compare monthly profits:

``` sql
SELECT month,
       profit,
       LAG(profit) OVER (ORDER BY month) AS previous_month_profit,
       profit - LAG(profit) OVER (ORDER BY month) AS profit_change
FROM monthly_revenue;
```

Another example - to rank customers by deal size within each country:

``` sql
SELECT customer_id, country, deal_size,
       RANK() OVER (PARTITION BY country ORDER BY deal_size DESC) AS rank
FROM deals;
```

In my opinion, SQL is more than using it as a query language. We can use it for data extraction, data transformation, and data analysis etc. Using it, we can answer all types of questions and deliver the results to the stakeholders to make effective decisions. Therefore, I believe SQL skill is a must-have for all data professionals. 