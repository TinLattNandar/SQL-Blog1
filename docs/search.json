[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Essential SQL Skills for Data Professionals",
    "section": "",
    "text": "During my time as a Data Analyst at a startup company, SQL was an essential tool to extract the data to measure key metrics such as product growth, customer churn over time, revenue trends, and deal success rates. For over three years, not a single day passed without writing SQL queries. In the data science field, I noticed that SQL is one of the requirements in the job description. Here, I’ll share some essential SQL techniques that a data professional should master.\n\n\nMastering Joins\nJoins are the fundatamental topic to combine multiple tables. It’s important to understand clearly to apply different types of joins based on the stakeholders’ request or requirements. Among different joins, LEFT JOIN and INNER JOIN were the ones I used most frequently.\nWhen to use each type of join: - INNER JOIN: Use when we want to extract the matching data in both tables. - LEFT JOIN: Use when we want all of the records from the first table based on the matched records from the second table\nHere’s a quick example for those two joins.\nSELECT c.customer_id, c.customer_name, o.order_id, o.order_date, o.order_amount\nFROM customers as c\nLEFT JOIN orders as o \nON c.customer_id = o.customer_id;\nThis query will retrieve all the customers from the customers table, including the customers without any orders.\nSELECT c.customer_id, c.customer_name, o.order_id, o.order_date, o.order_amount \nFROM customers as c\nINNER JOIN orders as o \nON c.customer_id = o.customer_id;\nThis query will retrieve only the customers who had orders. \n\n\nUsing CASE WHEN for Conditional Logic\nThe CASE WHEN statement is used to segment or categorize the data. Before we use this, there are a few conditions to consider to make sure that the logic is aligned with stakeholders because this categorization will lead to wrong directions.\nLet’s say we want to segment companies based on the number of employees they had:\nSELECT company_name,\n       CASE\n           WHEN employees &gt;= 500 THEN 'Large'\n           WHEN employees BETWEEN 100 AND 499 THEN 'Medium'\n           ELSE 'Small'\n       END AS company_size\nFROM companies;\nThis query will segment the companies’ size which will help us to do further analysis.\n\n\nLeveraging Aggregate Functions\nAggregate functions are essential for summarizing data - for example we want to extract the customer’s usage data over time, whether weekly, monthly, or annually.\nLet’s suppose our stakeholders request a dashboard showing product usage hours over different time frames.\nSELECT customer_id,\n       DATE_TRUNC('month', usage_timestamp) AS month,\n       SUM(usage_hours) AS total_usage\nFROM product_usage\nGROUP BY customer_id, month;\nBefore we extract the data over time, we need to convert the timestamp first to the time that we want to apply in the dashboard. All the data that is related with time in our product_usage table is stored as a timestamp. Therefore, we need to master the data type conversion as well.\n\n\nData Type Conversion\nConverting data types is often necessary for analysis. Before we convert the data, we should understand well about the input format of our data and what we want as the output. Data type conversion is common when we extract the data from our database.\nHere is the same concept as the previous example. We want the product usage date to do analysis.\nSELECT customer_id, CAST(usage_timestamp AS DATE) AS usage_date\nFROM product_usage;\n\n\nCommon Table Expressions (CTEs)\nWhen we deal with complex queries, CTEs will allow us to make our SQL queries more readable and easy to manage. In my opinion, the reasons behind using CTEs are to break down the complex queries into simple queries and to use the results within the same queries.\nLet’s say we need to join two tables first, then combine the result with another dataset. Here’s an example:\nWITH customer_orders AS (\n    SELECT customer_id, COUNT(order_id) AS total_orders, SUM(amount) as total_amount\n    FROM orders\n    GROUP BY customer_id\n),\ncustomer_details AS ( \nSELECT ci.customer_id, ci.tier_level, s.segment_level \nFROM customer_info as ci\nLEFT JOIN customer_segments s \nON ci.customer_id = s.customer_id )\n\nSELECT a.customer_id, a.total_orders, total_amount, tier_level, segment_level\nFROM customer_orders a\nJOIN customer_details b ON a.customer_id = b.customer_id;\nWe can use multiple joins in the first transactions in customer_orders. But it’ll mix with customer_orders data and customer_details info. If the query is too complex, it’s not easy to trace what’s wrong. Therefore, we split two steps - customer_orders and customer_details.\n\n\nApplying Window Functions\nWindow functions are powerful to do the complex computations such as comparing monthly profits or ranking customers. As an example, we want to get the moving averages or the comparisons within the tier level or we need to set the ranks across the countries.\nLet’s write the query to compare monthly profits:\nSELECT month,\n       profit,\n       LAG(profit) OVER (ORDER BY month) AS previous_month_profit,\n       profit - LAG(profit) OVER (ORDER BY month) AS profit_change\nFROM monthly_revenue;\nAnother example - to rank customers by deal size within each country:\nSELECT customer_id, country, deal_size,\n       RANK() OVER (PARTITION BY country ORDER BY deal_size DESC) AS rank\nFROM deals;\nIn my opinion, SQL is more than using it as a query language. We can use it for data extraction, data transformation, and data analysis etc. Using it, we can answer all types of questions and deliver the results to the stakeholders to make effective decisions. Therefore, I believe SQL skill is a must-have for all data professionals."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SQL Blog1",
    "section": "",
    "text": "Post With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 17, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nEssential SQL Skills for Data Professionals\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 14, 2025\n\n\nAnna Nandar\n\n\n\n\n\n\nNo matching items"
  }
]